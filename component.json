{
    "title": "Amazon Simple Queue Service",
    "description": "Welcome to the Amazon Simple Queue Service API Reference.\n\nAmazon Simple Queue Service (Amazon SQS) is a reliable, highly-scalable hosted\nqueue for storing messages as they travel between applications or microservices.\nAmazon SQS moves data between distributed application components and helps you\ndecouple these components.\n\n Standard queues\n[http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/standard-queues.html] \nare available in all regions. FIFO queues\n[http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html] \nare available in the US East (N. Virginia), US East (Ohio), US West (Oregon),\nand EU (Ireland) regions.\n\nYou can use AWS SDKs [http://aws.amazon.com/tools/#sdk] to access Amazon SQS\nusing your favorite programming language. The SDKs perform tasks such as the\nfollowing automatically:\n\n *  Cryptographically sign your service requests\n   \n   \n *  Retry requests\n   \n   \n *  Handle error responses\n   \n   \n\n Additional Information \n\n *   Amazon SQS Product Page [http://aws.amazon.com/sqs/] \n   \n   \n *   Amazon Simple Queue Service Developer Guide \n   \n    *   Making API Requests\n      [http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-making-api-requests.html] \n       \n      \n      \n    *   Amazon SQS Message Attributes\n      [http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-attributes.html] \n       \n      \n      \n    *   Amazon SQS Dead-Letter Queues\n      [http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html] \n       \n      \n      \n   \n   \n *   Amazon SQS in the AWS CLI Command Reference\n   [http://docs.aws.amazon.com/cli/latest/reference/sqs/index.html] \n   \n   \n *   Amazon Web Services General Reference \n   \n    *   Regions and Endpoints\n      [http://docs.aws.amazon.com/general/latest/gr/rande.html#sqs_region]",
    "docsUrl": "https://docs.aws.amazon.com/sqs/",
    "url": "https://api.apis.guru/v2/specs/amazonaws.com/sqs/2012-11-05/swagger.json",
    "envVars": {},
    "credentials": {
        "fields": {
            "server": {
                "label": "Server",
                "viewClass": "SelectView",
                "model": [
                    "https://sqs.amazonaws.com/",
                    "http://sqs.amazonaws.com/",
                    "--- Custom URL"
                ],
                "required": true
            },
            "otherServer": {
                "label": "Custom Server URL",
                "viewClass": "TextFieldView"
            },
            "auth_hmac": {
                "label": "Authorization (hmac)",
                "viewClass": "TextFieldView",
                "note": "Amazon Signature authorization v4"
            }
        }
    },
    "triggers": {
        "startFlow": {
            "main": "./lib/triggers/startFlow.js",
            "type": "polling",
            "title": "Start Flow",
            "fields": {}
        }
    },
    "actions": {
        "AddPermission": {
            "main": "./lib/actions/AddPermission.js",
            "title": "AddPermission",
            "description": "Adds a permission to a queue for a specific principal\n[http://docs.aws.amazon.com/general/latest/gr/glos-chap.html#P]. This allows\nsharing access to the queue.\n\nWhen you create a queue, you have full control access rights for the queue. Only\nyou, the owner of the queue, can grant or deny permissions to the queue. For\nmore information about these permissions, see Allow Developers to Write Messages\nto a Shared Queue\n[http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-writing-an-sqs-policy.html#write-messages-to-shared-queue] \nin the Amazon Simple Queue Service Developer Guide.\n\n AddPermission writes an Amazon-SQS-generated policy. If you want to write your\nown policy, use SetQueueAttributes to upload your policy. For more information\nabout writing your own policy, see Using Custom Policies with the Amazon SQS\nAccess Policy Language\n[http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-creating-custom-policies.html] \nin the Amazon Simple Queue Service Developer Guide.\n\nAn Amazon SQS policy can have a maximum of 7 actions.\n\nSome actions take lists of parameters. These lists are specified using the \nparam.n notation. Values of n are integers starting from 1. For example, a\nparameter list with two elements looks like this:\n\n &Attribute.1=first \n\n &Attribute.2=second \n\nCross-account permissions don't apply to this action. For more information, see\nsee Grant Cross-Account Permissions to a Role and a User Name\n[http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name] \nin the Amazon Simple Queue Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/AddPermission.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ChangeMessageVisibility": {
            "main": "./lib/actions/ChangeMessageVisibility.js",
            "title": "ChangeMessageVisibility",
            "description": "Changes the visibility timeout of a specified message in a queue to a new value.\nThe maximum allowed timeout value is 12 hours. For more information, see \nVisibility Timeout\n[http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html] \nin the Amazon Simple Queue Service Developer Guide.\n\nFor example, you have a message with a visibility timeout of 5 minutes. After 3\nminutes, you call ChangeMessageVisibility with a timeout of 10 minutes. You can\ncontinue to call ChangeMessageVisibility to extend the visibility timeout to a\nmaximum of 12 hours. If you try to extend the visibility timeout beyond 12\nhours, your request is rejected.\n\nA message is considered to be in flight after it's received from a queue by a\nconsumer, but not yet deleted from the queue.\n\nFor standard queues, there can be a maximum of 120,000 inflight messages per\nqueue. If you reach this limit, Amazon SQS returns the OverLimit error message.\nTo avoid reaching the limit, you should delete messages from the queue after\nthey're processed. You can also increase the number of queues you use to process\nyour messages.\n\nFor FIFO queues, there can be a maximum of 20,000 inflight messages per queue.\nIf you reach this limit, Amazon SQS returns no error messages.\n\nIf you attempt to set the VisibilityTimeout to a value greater than the maximum\ntime left, Amazon SQS returns an error. Amazon SQS doesn't automatically\nrecalculate and increase the timeout to the maximum remaining time.\n\nUnlike with a queue, when you change the visibility timeout for a specific\nmessage the timeout value is applied immediately but isn't saved in memory for\nthat message. If you don't delete a message after it is received, the visibility\ntimeout for the message reverts to the original timeout value (not to the value\nyou set using the ChangeMessageVisibility action) the next time the message is\nreceived.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ChangeMessageVisibility.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ChangeMessageVisibilityBatch": {
            "main": "./lib/actions/ChangeMessageVisibilityBatch.js",
            "title": "ChangeMessageVisibilityBatch",
            "description": "Changes the visibility timeout of multiple messages. This is a batch version of \nChangeMessageVisibility. The result of the action on each message is reported\nindividually in the response. You can send up to 10 ChangeMessageVisibility \nrequests with each ChangeMessageVisibilityBatch action.\n\nBecause the batch request can result in a combination of successful and\nunsuccessful actions, you should check for batch errors even when the call\nreturns an HTTP status code of 200.\n\nSome actions take lists of parameters. These lists are specified using the \nparam.n notation. Values of n are integers starting from 1. For example, a\nparameter list with two elements looks like this:\n\n &Attribute.1=first \n\n &Attribute.2=second",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ChangeMessageVisibilityBatch.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateQueue": {
            "main": "./lib/actions/CreateQueue.js",
            "title": "CreateQueue",
            "description": "Creates a new standard or FIFO queue. You can pass one or more attributes in the\nrequest. Keep the following caveats in mind:\n\n *  If you don't specify the FifoQueue attribute, Amazon SQS creates a standard\n   queue.\n   \n    You can't change the queue type after you create it and you can't convert an\n   existing standard queue into a FIFO queue. You must either create a new FIFO\n   queue for your application or delete your existing standard queue and\n   recreate it as a FIFO queue. For more information, see Moving From a Standard\n   Queue to a FIFO Queue\n   [http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html#FIFO-queues-moving] \n   in the Amazon Simple Queue Service Developer Guide. \n   \n   \n *  If you don't provide a value for an attribute, the queue is created with the\n   default value for the attribute.\n   \n   \n *  If you delete a queue, you must wait at least 60 seconds before creating a\n   queue with the same name.\n   \n   \n\nTo successfully create a new queue, you must provide a queue name that adheres\nto the limits related to queues\n[http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/limits-queues.html] \nand is unique within the scope of your queues.\n\nTo get the queue URL, use the GetQueueUrl action. GetQueueUrl requires only the \nQueueName parameter. be aware of existing queue names:\n\n *  If you provide the name of an existing queue along with the exact names and\n   values of all the queue's attributes, CreateQueue returns the queue URL for\n   the existing queue.\n   \n   \n *  If the queue name, attribute names, or attribute values don't match an\n   existing queue, CreateQueue returns an error.\n   \n   \n\nSome actions take lists of parameters. These lists are specified using the \nparam.n notation. Values of n are integers starting from 1. For example, a\nparameter list with two elements looks like this:\n\n &Attribute.1=first \n\n &Attribute.2=second \n\nCross-account permissions don't apply to this action. For more information, see\nsee Grant Cross-Account Permissions to a Role and a User Name\n[http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name] \nin the Amazon Simple Queue Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateQueue.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteMessage": {
            "main": "./lib/actions/DeleteMessage.js",
            "title": "DeleteMessage",
            "description": "Deletes the specified message from the specified queue. To select the message to\ndelete, use the ReceiptHandle of the message (not the MessageId which you\nreceive when you send the message). Amazon SQS can delete a message from a queue\neven if a visibility timeout setting causes the message to be locked by another\nconsumer. Amazon SQS automatically deletes messages left in a queue longer than\nthe retention period configured for the queue. \n\nThe ReceiptHandle is associated with a specific instance of receiving a message.\nIf you receive a message more than once, the ReceiptHandle is different each\ntime you receive a message. When you use the DeleteMessage action, you must\nprovide the most recently received ReceiptHandle for the message (otherwise, the\nrequest succeeds, but the message might not be deleted).\n\nFor standard queues, it is possible to receive a message even after you delete\nit. This might happen on rare occasions if one of the servers which stores a\ncopy of the message is unavailable when you send the request to delete the\nmessage. The copy remains on the server and might be returned to you during a\nsubsequent receive request. You should ensure that your application is\nidempotent, so that receiving a message more than once does not cause issues.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteMessage.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteMessageBatch": {
            "main": "./lib/actions/DeleteMessageBatch.js",
            "title": "DeleteMessageBatch",
            "description": "Deletes up to ten messages from the specified queue. This is a batch version of \nDeleteMessage. The result of the action on each message is reported individually\nin the response.\n\nBecause the batch request can result in a combination of successful and\nunsuccessful actions, you should check for batch errors even when the call\nreturns an HTTP status code of 200.\n\nSome actions take lists of parameters. These lists are specified using the \nparam.n notation. Values of n are integers starting from 1. For example, a\nparameter list with two elements looks like this:\n\n &Attribute.1=first \n\n &Attribute.2=second",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteMessageBatch.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteQueue": {
            "main": "./lib/actions/DeleteQueue.js",
            "title": "DeleteQueue",
            "description": "Deletes the queue specified by the QueueUrl, regardless of the queue's contents.\nIf the specified queue doesn't exist, Amazon SQS returns a successful response.\n\nBe careful with the DeleteQueue action: When you delete a queue, any messages in\nthe queue are no longer available. \n\nWhen you delete a queue, the deletion process takes up to 60 seconds. Requests\nyou send involving that queue during the 60 seconds might succeed. For example,\na SendMessage request might succeed, but after 60 seconds the queue and the\nmessage you sent no longer exist.\n\nWhen you delete a queue, you must wait at least 60 seconds before creating a\nqueue with the same name.\n\nCross-account permissions don't apply to this action. For more information, see\nsee Grant Cross-Account Permissions to a Role and a User Name\n[http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name] \nin the Amazon Simple Queue Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteQueue.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetQueueAttributes": {
            "main": "./lib/actions/GetQueueAttributes.js",
            "title": "GetQueueAttributes",
            "description": "Gets attributes for the specified queue.\n\nTo determine whether a queue is FIFO\n[http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html]\n, you can check whether QueueName ends with the .fifo suffix.\n\nSome actions take lists of parameters. These lists are specified using the \nparam.n notation. Values of n are integers starting from 1. For example, a\nparameter list with two elements looks like this:\n\n &Attribute.1=first \n\n &Attribute.2=second",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetQueueAttributes.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetQueueUrl": {
            "main": "./lib/actions/GetQueueUrl.js",
            "title": "GetQueueUrl",
            "description": "Returns the URL of an existing Amazon SQS queue.\n\nTo access a queue that belongs to another AWS account, use the \nQueueOwnerAWSAccountId parameter to specify the account ID of the queue's owner.\nThe queue's owner must grant you permission to access the queue. For more\ninformation about shared queue access, see AddPermission or see Allow Developers\nto Write Messages to a Shared Queue\n[http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-writing-an-sqs-policy.html#write-messages-to-shared-queue] \nin the Amazon Simple Queue Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetQueueUrl.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListDeadLetterSourceQueues": {
            "main": "./lib/actions/ListDeadLetterSourceQueues.js",
            "title": "ListDeadLetterSourceQueues",
            "description": "Returns a list of your queues that have the RedrivePolicy queue attribute\nconfigured with a dead-letter queue.\n\nFor more information about using dead-letter queues, see Using Amazon SQS\nDead-Letter Queues\n[http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html] \nin the Amazon Simple Queue Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListDeadLetterSourceQueues.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListQueueTags": {
            "main": "./lib/actions/ListQueueTags.js",
            "title": "ListQueueTags",
            "description": "List all cost allocation tags added to the specified Amazon SQS queue. For an\noverview, see Tagging Your Amazon SQS Queues\n[http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html] \nin the Amazon Simple Queue Service Developer Guide.\n\nWhen you use queue tags, keep the following guidelines in mind:\n\n *  Adding more than 50 tags to a queue isn't recommended.\n   \n   \n *  Tags don't have any semantic meaning. Amazon SQS interprets tags as\n   character strings.\n   \n   \n *  Tags are case-sensitive.\n   \n   \n *  A new tag with a key identical to that of an existing tag overwrites the\n   existing tag.\n   \n   \n *  Tagging actions are limited to 5 TPS per AWS account. If your application\n   requires a higher throughput, file a technical support request\n   [https://console.aws.amazon.com/support/home#/case/create?issueType=technical]\n   .\n   \n   \n\nFor a full list of tag restrictions, see Limits Related to Queues\n[http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-limits.html#limits-queues] \nin the Amazon Simple Queue Service Developer Guide.\n\nCross-account permissions don't apply to this action. For more information, see\nsee Grant Cross-Account Permissions to a Role and a User Name\n[http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name] \nin the Amazon Simple Queue Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListQueueTags.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListQueues": {
            "main": "./lib/actions/ListQueues.js",
            "title": "ListQueues",
            "description": "Returns a list of your queues. The maximum number of queues that can be returned\nis 1,000. If you specify a value for the optional QueueNamePrefix parameter,\nonly queues with a name that begins with the specified value are returned.\n\nCross-account permissions don't apply to this action. For more information, see\nsee Grant Cross-Account Permissions to a Role and a User Name\n[http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name] \nin the Amazon Simple Queue Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListQueues.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PurgeQueue": {
            "main": "./lib/actions/PurgeQueue.js",
            "title": "PurgeQueue",
            "description": "Deletes the messages in a queue specified by the QueueURL parameter.\n\nWhen you use the PurgeQueue action, you can't retrieve any messages deleted from\na queue.\n\nThe message deletion process takes up to 60 seconds. We recommend waiting for 60\nseconds regardless of your queue's size. \n\nMessages sent to the queue before you call PurgeQueue might be received but are\ndeleted within the next minute.\n\nMessages sent to the queue after you call PurgeQueue might be deleted while the\nqueue is being purged.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PurgeQueue.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ReceiveMessage": {
            "main": "./lib/actions/ReceiveMessage.js",
            "title": "ReceiveMessage",
            "description": "Retrieves one or more messages (up to 10), from the specified queue. Using the \nWaitTimeSeconds parameter enables long-poll support. For more information, see \nAmazon SQS Long Polling\n[http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-long-polling.html] \nin the Amazon Simple Queue Service Developer Guide. \n\nShort poll is the default behavior where a weighted random set of machines is\nsampled on a ReceiveMessage call. Thus, only the messages on the sampled\nmachines are returned. If the number of messages in the queue is small (fewer\nthan 1,000), you most likely get fewer messages than you requested per \nReceiveMessage call. If the number of messages in the queue is extremely small,\nyou might not receive any messages in a particular ReceiveMessage response. If\nthis happens, repeat the request. \n\nFor each message returned, the response includes the following:\n\n *  The message body.\n   \n   \n *  An MD5 digest of the message body. For information about MD5, see RFC1321\n   [https://www.ietf.org/rfc/rfc1321.txt].\n   \n   \n *  The MessageId you received when you sent the message to the queue.\n   \n   \n *  The receipt handle.\n   \n   \n *  The message attributes.\n   \n   \n *  An MD5 digest of the message attributes.\n   \n   \n\nThe receipt handle is the identifier you must provide when deleting the message.\nFor more information, see Queue and Message Identifiers\n[http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-message-identifiers.html] \nin the Amazon Simple Queue Service Developer Guide.\n\nYou can provide the VisibilityTimeout parameter in your request. The parameter\nis applied to the messages that Amazon SQS returns in the response. If you don't\ninclude the parameter, the overall visibility timeout for the queue is used for\nthe returned messages. For more information, see Visibility Timeout\n[http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html] \nin the Amazon Simple Queue Service Developer Guide.\n\nA message that isn't deleted or a message whose visibility isn't extended before\nthe visibility timeout expires counts as a failed receive. Depending on the\nconfiguration of the queue, the message might be sent to the dead-letter queue.\n\nIn the future, new attributes might be added. If you write code that calls this\naction, we recommend that you structure your code so that it can handle new\nattributes gracefully.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ReceiveMessage.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "RemovePermission": {
            "main": "./lib/actions/RemovePermission.js",
            "title": "RemovePermission",
            "description": "Revokes any permissions in the queue policy that matches the specified Label \nparameter.\n\nOnly the owner of a queue can remove permissions from it.\n\nCross-account permissions don't apply to this action. For more information, see\nsee Grant Cross-Account Permissions to a Role and a User Name\n[http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name] \nin the Amazon Simple Queue Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/RemovePermission.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "SendMessage": {
            "main": "./lib/actions/SendMessage.js",
            "title": "SendMessage",
            "description": "Delivers a message to the specified queue.\n\nA message can include only XML, JSON, and unformatted text. The following\nUnicode characters are allowed:\n\n #x9 | #xA | #xD | #x20 to #xD7FF | #xE000 to #xFFFD | #x10000 to #x10FFFF \n\nAny characters not included in this list will be rejected. For more information,\nsee the W3C specification for characters\n[http://www.w3.org/TR/REC-xml/#charsets].",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/SendMessage.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "SendMessageBatch": {
            "main": "./lib/actions/SendMessageBatch.js",
            "title": "SendMessageBatch",
            "description": "Delivers up to ten messages to the specified queue. This is a batch version of \nSendMessage. For a FIFO queue, multiple messages within a single batch are\nenqueued in the order they are sent.\n\nThe result of sending each message is reported individually in the response.\nBecause the batch request can result in a combination of successful and\nunsuccessful actions, you should check for batch errors even when the call\nreturns an HTTP status code of 200.\n\nThe maximum allowed individual message size and the maximum total payload size\n(the sum of the individual lengths of all of the batched messages) are both 256\nKB (262,144 bytes).\n\nA message can include only XML, JSON, and unformatted text. The following\nUnicode characters are allowed:\n\n #x9 | #xA | #xD | #x20 to #xD7FF | #xE000 to #xFFFD | #x10000 to #x10FFFF \n\nAny characters not included in this list will be rejected. For more information,\nsee the W3C specification for characters\n[http://www.w3.org/TR/REC-xml/#charsets].\n\nIf you don't specify the DelaySeconds parameter for an entry, Amazon SQS uses\nthe default value for the queue.\n\nSome actions take lists of parameters. These lists are specified using the \nparam.n notation. Values of n are integers starting from 1. For example, a\nparameter list with two elements looks like this:\n\n &Attribute.1=first \n\n &Attribute.2=second",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/SendMessageBatch.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "SetQueueAttributes": {
            "main": "./lib/actions/SetQueueAttributes.js",
            "title": "SetQueueAttributes",
            "description": "Sets the value of one or more queue attributes. When you change a queue's\nattributes, the change can take up to 60 seconds for most of the attributes to\npropagate throughout the Amazon SQS system. Changes made to the \nMessageRetentionPeriod attribute can take up to 15 minutes.\n\nIn the future, new attributes might be added. If you write code that calls this\naction, we recommend that you structure your code so that it can handle new\nattributes gracefully.\n\nCross-account permissions don't apply to this action. For more information, see\nsee Grant Cross-Account Permissions to a Role and a User Name\n[http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name] \nin the Amazon Simple Queue Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/SetQueueAttributes.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "TagQueue": {
            "main": "./lib/actions/TagQueue.js",
            "title": "TagQueue",
            "description": "Add cost allocation tags to the specified Amazon SQS queue. For an overview, see \nTagging Your Amazon SQS Queues\n[http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html] \nin the Amazon Simple Queue Service Developer Guide.\n\nWhen you use queue tags, keep the following guidelines in mind:\n\n *  Adding more than 50 tags to a queue isn't recommended.\n   \n   \n *  Tags don't have any semantic meaning. Amazon SQS interprets tags as\n   character strings.\n   \n   \n *  Tags are case-sensitive.\n   \n   \n *  A new tag with a key identical to that of an existing tag overwrites the\n   existing tag.\n   \n   \n *  Tagging actions are limited to 5 TPS per AWS account. If your application\n   requires a higher throughput, file a technical support request\n   [https://console.aws.amazon.com/support/home#/case/create?issueType=technical]\n   .\n   \n   \n\nFor a full list of tag restrictions, see Limits Related to Queues\n[http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-limits.html#limits-queues] \nin the Amazon Simple Queue Service Developer Guide.\n\nCross-account permissions don't apply to this action. For more information, see\nsee Grant Cross-Account Permissions to a Role and a User Name\n[http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name] \nin the Amazon Simple Queue Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/TagQueue.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UntagQueue": {
            "main": "./lib/actions/UntagQueue.js",
            "title": "UntagQueue",
            "description": "Remove cost allocation tags from the specified Amazon SQS queue. For an\noverview, see Tagging Your Amazon SQS Queues\n[http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html] \nin the Amazon Simple Queue Service Developer Guide.\n\nWhen you use queue tags, keep the following guidelines in mind:\n\n *  Adding more than 50 tags to a queue isn't recommended.\n   \n   \n *  Tags don't have any semantic meaning. Amazon SQS interprets tags as\n   character strings.\n   \n   \n *  Tags are case-sensitive.\n   \n   \n *  A new tag with a key identical to that of an existing tag overwrites the\n   existing tag.\n   \n   \n *  Tagging actions are limited to 5 TPS per AWS account. If your application\n   requires a higher throughput, file a technical support request\n   [https://console.aws.amazon.com/support/home#/case/create?issueType=technical]\n   .\n   \n   \n\nFor a full list of tag restrictions, see Limits Related to Queues\n[http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-limits.html#limits-queues] \nin the Amazon Simple Queue Service Developer Guide.\n\nCross-account permissions don't apply to this action. For more information, see\nsee Grant Cross-Account Permissions to a Role and a User Name\n[http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name] \nin the Amazon Simple Queue Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UntagQueue.in.json",
                "out": {
                    "type": "object"
                }
            }
        }
    }
}